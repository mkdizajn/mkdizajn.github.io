<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>mk</title>
 <link href="https://mkdizajn.github.io//atom.xml" rel="self"/>
 <link href="https://mkdizajn.github.io//"/>
 <updated>2015-10-11T17:31:47+02:00</updated>
 <id>https://mkdizajn.github.io/</id>
 <author>
   <name>Kresimir Pendic</name>
   <email>k@mk-dizajn.com</email>
 </author>

 
 <entry>
   <title>I hate chickenpox :|</title>
   <link href="https://mkdizajn.github.io//2014/08/02/i-hate-chickenpox/"/>
   <updated>2014-08-02T00:00:00+02:00</updated>
   <id>https://mkdizajn.github.io//2014/08/02/i-hate-chickenpox</id>
   <content type="html">&lt;div class=message&gt;
My older daughter Paula got chickenpox the other day,, what a nasty disease yikes.. 
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/media/eye.jpg&quot; alt=&quot;eye.jpg&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Our brain :)</title>
   <link href="https://mkdizajn.github.io//2014/07/30/my/"/>
   <updated>2014-07-30T00:00:00+02:00</updated>
   <id>https://mkdizajn.github.io//2014/07/30/my</id>
   <content type="html">&lt;div class=message&gt;
what a incubus ..
&lt;/div&gt;

&lt;h2&gt;This is my little list&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;first item&lt;/li&gt;
&lt;li&gt;second item..&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Image Processing Html5</title>
   <link href="https://mkdizajn.github.io//2014/07/30/image-processing-html5/"/>
   <updated>2014-07-30T00:00:00+02:00</updated>
   <id>https://mkdizajn.github.io//2014/07/30/image-processing-html5</id>
   <content type="html">&lt;div class=message&gt;
HTML5 getImageData object to alter images in browser,, so many possibilities..
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Simple&lt;/strong&gt; examples of using image filters ..&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;/**
 * Image filters
 * @type {Object}
 */


Filters = {};
Filters.getPixels = function(img) {
    var c = this.getCanvas(img.width, img.height);
    var ctx = c.getContext('2d');
    ctx.drawImage(img);
    return ctx.getImageData(0, 0, c.width, c.height);
};

Filters.getCanvas = function(w, h) {
    var c = document.createElement('canvas');
    c.width = w;
    c.height = h;
    return c;
};

Filters.filterImage = function(filter, image, var_args) {
    var args = [this.getPixels(image)];
    for (var i = 2; i &amp;lt; arguments.length; i++) {
        args.push(arguments[i]);
    }
    return filter.apply(null, args);
};


Filters.grayscale = function(pixels, args) {
    var d = pixels.data;
    for (var i = 0; i &amp;lt; d.length; i += 4) {
        var r = d[i];
        var g = d[i + 1];
        var b = d[i + 2];
        // CIE luminance for the RGB
        // The human eye is bad at seeing red and blue, so we de-emphasize them.
        var v = 0.2126 * r + 0.7152 * g + 0.0722 * b;
        d[i] = d[i + 1] = d[i + 2] = v
    }
    return pixels;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;cheers, k&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Select2 hook to trigger phpgrid</title>
   <link href="https://mkdizajn.github.io//2014/01/02/select2-hook-phpgrid/"/>
   <updated>2014-01-02T00:00:00+01:00</updated>
   <id>https://mkdizajn.github.io//2014/01/02/select2-hook-phpgrid</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Hi! This is an example code post that shows several types of great select2 content via ajax search and redirecting result from outside (this) scope :)
&lt;/div&gt;

&lt;h3&gt;Select2 hook on phpGrid&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;$('.FormElement.select2').select2({
    width: '99%',
    separator: ';',
    placeholder: &amp;quot;-- Select --&amp;quot;,
    minimumInputLength: 1,
    allowClear: true,
    dropdownCssClass: &amp;quot;malaslova&amp;quot;,

    initSelection: function(element, callback) {
        var res = &amp;quot;&amp;quot;;
        var tmp = &amp;quot;&amp;quot;;

        if (element.attr('temp') == undefined) { 
            tmp = element.val().split(':')[0].trim();
            element.attr('temp', tmp); 
        }

        tmp = element.attr('temp');

        res = {
            id: tmp,
            text: element.val()
        };
        callback(res);
    },

    ajax: {
        url: &amp;quot;/main/ajax/lookup_select2.php&amp;quot;,
        dataType: 'json',
        quietMillis: 750,
        data: function(term) {
            return {
                lookup_table: $(this).attr('rel'),
                lookup_key: $(this).attr('lookup_key'), 
                id_table_main: $('.selected_tab_parent').attr('rel'),
                fkid: $('.selected_tab_parent').attr('node_id'),
                q: term,
                mod: window.modtype
            };
        },
        results: function(data) {
            var results = [];
            var id1 = data.id;
            var name = data.text;
            $.each(data.data, function(index, item) {
                results.push({
                    id: item[id1],
                    text: item[name].trim() + ' : ' + item[id1]
                });
            });
            return {
                results: results
            };
        }
    },

});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;phpGrid has builtin form that have basic lookup feature, and in this gist I&amp;#39;m showing couple of methods that I do on aftershowform event.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hiding / Showing controls that have dependance of other controls&lt;/li&gt;
&lt;li&gt;Redirecting result value from one select2 to another&lt;/li&gt;
&lt;li&gt;Getting / setting multiselect for column&lt;/li&gt;
&lt;li&gt;Getting / setting form column count&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cheers, k&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Meteor event hangling helper</title>
   <link href="https://mkdizajn.github.io//2014/01/01/meteor-helper/"/>
   <updated>2014-01-01T00:00:00+01:00</updated>
   <id>https://mkdizajn.github.io//2014/01/01/meteor-helper</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Ohh that meteorjs.. here is something that I like very much with this kind of approach to handling events 
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;This is very clean way how to hangle event calls on various input elements. Meteor use this on their todo demo. Here:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;////////// Helpers for in-place editing //////////

// Returns an event map that handles the &amp;quot;escape&amp;quot; and &amp;quot;return&amp;quot; keys and
// &amp;quot;blur&amp;quot; events on a text input (given by selector) and interprets them
// as &amp;quot;ok&amp;quot; or &amp;quot;cancel&amp;quot;.
var okCancelEvents = function (selector, callbacks) {
  var ok = callbacks.ok || function () {};
  var cancel = callbacks.cancel || function () {};

  var events = {};
  events['keyup '+selector+', keydown '+selector+', focusout '+selector] =
    function (evt) {
      if (evt.type === &amp;quot;keydown&amp;quot; &amp;amp;&amp;amp; evt.which === 27) {
        // escape = cancel
        cancel.call(this, evt);

      } else if (evt.type === &amp;quot;keyup&amp;quot; &amp;amp;&amp;amp; evt.which === 13 ||
                 evt.type === &amp;quot;focusout&amp;quot;) {
        // blur/return/enter = ok/submit if non-empty
        var value = String(evt.target.value || &amp;quot;&amp;quot;);
        if (value)
          ok.call(this, value, evt);
        else
          cancel.call(this, evt);
      }
    };

  return events;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And to see it in action you can use it like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;// Attach events to keydown, keyup, and blur on &amp;quot;New list&amp;quot; input box.
Template.lists.events(okCancelEvents(
  '#new-list',
  {
    ok: function (text, evt) {
      var id = Lists.insert({name: text});
      Router.setList(id);
      evt.target.value = &amp;quot;&amp;quot;;
    }
  }));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;Have questions or suggestions? Feel free to &lt;a href=&quot;https://github.com/mkdizajn/mkdizajn.github.io/issues/new&quot;&gt;open an issue on GitHub&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/mkdizajn&quot;&gt;ask me on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Responsive tables css</title>
   <link href="https://mkdizajn.github.io//2013/12/31/responsive-tables/"/>
   <updated>2013-12-31T00:00:00+01:00</updated>
   <id>https://mkdizajn.github.io//2013/12/31/responsive-tables</id>
   <content type="html">&lt;div class=message&gt;
   If you have some data laying around in html table, you can have it responsive via css
&lt;/div&gt;

&lt;p&gt;Try this classes and play with it little to get best results..&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;@media only screen and (max-width: 760px),
  (min-device-width: 768px) and (max-device-width: 1024px)  {
  
    /* Force table to not be like tables anymore */
    table, thead, tbody, th, td, tr { 
      display: block; 
    }
    
    /* Hide table headers (but not display: none;, for accessibility) */
    thead tr { 
      position: absolute;
      top: -9999px;
      left: -9999px;
    }
    
    tr { border: 1px solid #ccc; }
    
    td { 
      /* Behave  like a &amp;quot;row&amp;quot; */
      border: none;
      border-bottom: 1px solid #eee; 
      position: relative;
      padding-left: 50%; 
    }
    
    td:before { 
      /* Now like a table header */
      position: absolute;
      /* Top/left values mimic padding */
      top: 6px;
      left: 6px;
      width: 45%; 
      padding-right: 10px; 
      /*white-space: nowrap;*/
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;cheers, k&lt;/p&gt;
</content>
 </entry>
 

</feed>
